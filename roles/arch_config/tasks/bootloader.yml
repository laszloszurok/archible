# - name: GRUB configuration | Install GRUB
#   ansible.builtin.command: grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB

# # acpi_backlight=none <- don't change the backlight on acpi events
# # resume=UUID=uuid-of-the-swap-partition <- needed for hibernation
# - name: GRUB configuration | Set kernel options in /etc/default/grub
#   ansible.builtin.lineinfile:
#     path: /etc/default/grub
#     regexp: ^GRUB_CMDLINE_LINUX=
#     line: GRUB_CMDLINE_LINUX="acpi_backlight=none resume=UUID={{ hostvars['localhost']['swap_uuid'] }}"

# - name: GRUB configuration | Generate GRUB config file
#   ansible.builtin.command: grub-mkconfig -o /boot/grub/grub.cfg

- name: Bootloader configuration | Install systemd-boot
  ansible.builtin.command: bootctl install

- name: Bootloader configuration | Check CPU vendor
  ansible.builtin.shell: cat /proc/cpuinfo | grep vendor | uniq | grep -o '[^ ]*$'
  register: cpu_vendor

- name: Bootloader configuration | Set microcode package prefix based on CPU vendor
  ansible.builtin.set_fact:
    microcode_package_prefix: |
      {% if "{{ cpu_vendor.stdout }}" == "AuthenticAMD" %}
        amd
      {% elif "{{ cpu_vendor.stdout }}" == "GenuineIntel" %}
        intel
      {% else %}
      {% endif %}

- name: Bootloader configuration | Install vendor specific microcode
  ansible.builtin.package:
    name: "{{ microcode_package_prefix }}-ucode"
  when: microcode_package_prefix | length > 0

- name: Bootloader configuration | Adding bootmenu entries
  ansible.builtin.copy:
    content: |
      title   Arch Linux
      linux   /vmlinuz-linux
      {{ 'initrd  /' + microcode_package_prefix + '-ucode.img' if (microcode_package_prefix | length > 0) }}
      initrd  /initramfs-linux.img
      options root=UUID={{ root_uuid.stdout }} resume=UUID={{ swap_uuid.stdout }}
